import Foundation
import SWModels

extension SWClient {
    private var successCode: Int { 200 }
    private var forceLogoutCode: Int { 401 }

    var urlSession: URLSession {
        let config = URLSessionConfiguration.default
        config.timeoutIntervalForRequest = timeoutInterval
        config.timeoutIntervalForResource = timeoutInterval
        return .init(configuration: config)
    }

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–ª–∏ –æ—Ç–¥–∞–µ—Ç –æ—à–∏–±–∫—É
    /// - Parameters:
    ///   - type: —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
    ///   - request: –∑–∞–ø—Ä–æ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
    /// - Returns: –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É
    func makeResult<T: Decodable>(_ type: T.Type, for request: URLRequest?) async throws -> T {
        guard let request = await finalRequest(request) else { throw APIError.badRequest }
        let (data, response) = try await urlSession.data(for: request)
        return try await handle(type, data, response)
    }

    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ —Ç—Ä–µ–±—É—é—â–µ–µ —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞
    /// - Parameter request: –∑–∞–ø—Ä–æ—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è
    /// - Returns: –°—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—è
    func makeStatus(for request: URLRequest?) async throws -> Bool {
        guard let request = await finalRequest(request) else {
            throw APIError.badRequest
        }
        let response = try await urlSession.data(for: request).1
        return try await handle(response)
    }

    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    /// - Parameter request: –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    /// - Returns: –ò—Ç–æ–≥–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    func finalRequest(_ request: URLRequest?) async -> URLRequest? {
        if needAuth,
           let encodedString = try? await defaults.basicAuthInfo().base64Encoded {
            var requestWithBasicAuth = request
            requestWithBasicAuth?.setValue(
                "Basic \(encodedString)",
                forHTTPHeaderField: "Authorization"
            )
            return requestWithBasicAuth
        } else {
            return request
        }
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    func handle<T: Decodable>(_ type: T.Type, _ data: Data?, _ response: URLResponse?) async throws -> T {
        guard let data, !data.isEmpty else {
            throw APIError.noData
        }
        let responseCode = (response as? HTTPURLResponse)?.statusCode
        guard responseCode == successCode else {
            if canForceLogout, responseCode == forceLogoutCode {
                await defaults.triggerLogout()
            }
            throw handleError(from: data, response: response)
        }
        #if DEBUG
        print("--- ‚úÖ –ü–æ–ª—É—á–∏–ª–∏ JSON –ø–æ –∑–∞–ø—Ä–æ—Å—É: ", (response?.url?.absoluteString) ?? "")
        print(data.prettyJson)
        do {
            _ = try JSONDecoder().decode(type, from: data)
        } catch {
            print("--- ‚õîÔ∏è –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: \(error)")
        }
        print("üèÅ")
        #endif
        return try JSONDecoder().decode(type, from: data)
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤–∞–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å
    func handle(_ response: URLResponse?) async throws -> Bool {
        let responseCode = (response as? HTTPURLResponse)?.statusCode
        #if DEBUG
        print("--- ‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–æ –∑–∞–ø—Ä–æ—Å—É: ", response?.url?.absoluteString ?? "")
        print(responseCode ?? 0)
        print("üèÅ")
        #endif
        guard responseCode == successCode else {
            if canForceLogout, responseCode == forceLogoutCode {
                await defaults.triggerLogout()
            }
            throw APIError(with: responseCode)
        }
        return true
    }

    /// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏
    /// - Parameters:
    ///   - data: –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
    ///   - response: –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    /// - Returns: –ì–æ—Ç–æ–≤–∞—è –∫ –≤—ã–≤–æ–¥—É –æ—à–∏–±–∫–∞ `APIError`
    func handleError(from data: Data, response: URLResponse?) -> APIError {
        let errorCode = (response as? HTTPURLResponse)?.statusCode
        #if DEBUG
        let errorCodeMessage = if let errorCode {
            "–ö–æ–¥ –æ—à–∏–±–∫–∏ \(errorCode)"
        } else {
            "–û—à–∏–±–∫–∞!"
        }
        print("--- ‚õîÔ∏è \(errorCodeMessage)\nJSON —Å –æ—à–∏–±–∫–æ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: ", response?.url?.absoluteString ?? "")
        print(data.prettyJson)
        print("üèÅ")
        #endif
        if let errorInfo = try? JSONDecoder().decode(ErrorResponse.self, from: data) {
            return APIError(errorInfo, errorCode)
        } else {
            return APIError(with: errorCode)
        }
    }
}
